# BFS function
def bfs(graph, start):
    queue = [start]
    visited = set(queue)

    while queue:
        vertex = queue.pop(0)
        print(vertex) 

        for neighbor in graph[vertex]:
            if neighbor not in visited:
                queue.append(neighbor)
                visited.add(neighbor)

# DFS function
def dfs(graph, start, visited=None):
    if visited is None:
        visited = set()

    visited.add(start)
    print(start) 
    for neighbor in graph[start]:
        if neighbor not in visited:
            dfs(graph, neighbor, visited)


# Define the graph
graph = {
    0: [1, 2],
    1: [3, 4],
    2: [5, 6],
    3: [],
    4: [],
    5: [],
    6: []
}

# Call the functions
print("BFS:")
bfs(graph, 0)
print("\nDFS:")
dfs(graph, 0)
