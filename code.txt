# INPUT :
# START 200
# MOVER AREG , = 4
# MOVEM AREG , A
# MOVER BREG , = 1
# LTORG 
# ADD CREG , = 6
# STOP
# A DS 1
# B DS 1
# END

class pass1_assembler:
    def __init__(self,command):
        self.command=command
        self.symbol_table={}
        self.literal_table={}
        self.pool_table=[0]
        self.MOT={}
        
    def START(self):
        IS={'STOP':'00','ADD':'01','SUB':'02','MULTI':'03','MOVER':'04','MOVEM':'05',
             'COMB':'06','BC':'07','DIV':'08','READ':'09','PRINT':'10'}
        AD={'START':'01',
             'END':'02','ORIGIN':'03','EQU':'04','LTORG':'05'}
        DS={'DS':'01','DC':'02'}
        RG={'AREG':'01','BREG':'02','CREG':'03'}
        
        self.MOT.update(IS)
        self.MOT.update(AD)
        self.MOT.update(DS)
        self.MOT.update(RG)
        
        
        
        print('\n')
        print('Intermediate code_______________________________________________________________________________')
        print('\n')
        reg=0
        reg1=0
        LOC=200
        pool=0
        for i in self.command:
            j=i.split(' ')   #  j=MOVER AREG = '5'
        
            
            if j[0] not in self.symbol_table:
                if j[0] not in IS and j[0] not in RG and j[0] not in AD and j[0] not in DS:
                    print(' S',reg1,end='')
                    self.symbol_table[j[0]]=LOC
                    reg1+=1
                    
            else:
                for i,val in self.symbol_table.items():
                    if self.symbol_table[i]==j[0]:
                        print(' S',self.symbol_table.keys().index(i),end='')
                        

                
            for a in range(0,len(j)):
                        if j[a] in IS:
                            print(' IS '+IS[j[a]],end='')
                               
                        #for loop    
                               
                        else:
                            try:
                                if int(j[a])%1==0:
                                    print(' C '+j[a],end='')
                                    cnt+=1
                            except:
                                break

            for a in range(0,len(j)):
                        if j[a] in AD:
                            print(' AD '+AD[j[a]],end='')
                            
                        else:
                            try:
                                if int(j[a])%1==0:
                                    print(' C '+j[a],end='')
                                    cnt+=1
                            except:
                                break
                        
            for a in range(0,len(j)):
                        if j[a] in DS:
                            print(' DL '+DS[j[a]]+' C '+j[a+1],end='')
                        
            
                            
            for a in range(0,len(j)):
                        if j[a] in RG:
                            if j[a+2]=='=':
                                    print(' RG '+RG[j[a]]+' L ',reg,end='')
                                    self.literal_table[('='+j[a+3])]=LOC
                                    pool+=1
                                    reg+=1
                                
                            else:     
                                print(' RG '+RG[j[a]]+' S ',reg1,end='')
                                self.symbol_table[j[a+2]]=LOC
                                reg1+=1
                                
            for a in range(0,len(j)):
                if j[a]=='LTORG' or j[a]=='END':
                    self.pool_table.append(self.pool_table[-1]+pool)
                    
                                
            print('\n')
            LOC+=1
            
        print('\nData Structures _______________________________________________________________________________\n')
        
        print('1) MOT Table :\n')
        for i,val in self.MOT.items():
            print(i,':',val)
            
            
        print('\n2) Symbol Table : \n')
        for i,val in self.symbol_table.items():
            print(i,':',val)
            
            
        print('\n3)Literal Table : \n')
        for i,val in self.literal_table.items():
            print(i,':',val)
        
        print('\n3)Pool Table : \n')
        for i in self.pool_table:
            print(i)
        
        
        
        
        
x=int(input('Enter the no. of lines in Source code :'))
l1=[]
print('Enter source code :')
for i in range(0,x):
    line=input()
    l1.append(line)
    
print('\nSource code_________________________________________________________________________________\n')
for i in l1:
    print(i)
       
ans=pass1_assembler(l1)
ans.START()
